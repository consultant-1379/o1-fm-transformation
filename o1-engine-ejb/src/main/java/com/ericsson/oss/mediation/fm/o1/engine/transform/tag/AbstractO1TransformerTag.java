/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2023
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.oss.mediation.fm.o1.engine.transform.tag;

import com.ericsson.oss.mediation.fm.o1.engine.transform.Constants;
import com.ericsson.oss.mediation.fm.o1.engine.transform.OidKey;
import com.ericsson.oss.mediation.fm.o1.engine.transform.util.TransformerUtils;
import com.ericsson.oss.mediation.translator.model.EventNotification;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.jelly.JellyTagException;
import org.apache.commons.jelly.MissingAttributeException;
import org.apache.commons.jelly.TagSupport;
import org.apache.commons.jelly.XMLOutput;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.util.Map;

/**
 * Base class for all implementations of tags that should set the model's properties.
 */
public abstract class AbstractO1TransformerTag extends TagSupport {

    protected final Logger logger = LoggerFactory.getLogger(getClass());
    protected String oid;
    protected String mappedBy;
    protected OidKey oidKey;
    protected Object alarmObject;
    protected Map<OidKey, Object> alarmData;
    protected EventNotification eventNotification;


    public AbstractO1TransformerTag() {
        super();
    }

    /**
     * Evaluates this tag after all the tags properties have been initialized.
     *
     * @param xmlo object to which redirect the output.
     * @throws MissingAttributeException if a required attribute is missing.
     * @throws JellyTagException is an exception generated by
     * AbstractSetModelPropertyTag implementation.
     */
    @Override
    public final void doTag(final XMLOutput xmlo) throws MissingAttributeException, JellyTagException { 
        this.alarmObject = context.getVariable(Constants.SRC_OBJECT);
        if (alarmObject == null) {
            logger.error("{} variable not set", Constants.SRC_OBJECT);
            throw new ContextVariableNotFoundException(Constants.SRC_OBJECT);
        }
        this.eventNotification = (EventNotification) context.getVariable(Constants.DST_OBJECT);
        if (eventNotification == null) {
            logger.error("{} variable not set", Constants.DST_OBJECT);
            throw new ContextVariableNotFoundException(Constants.DST_OBJECT);
        }
        this.alarmData = (Map<OidKey, Object>) context.getVariable(Constants.SRC_VALUES_MAP);
        if (alarmData == null) {
            logger.error("{} variable not set", Constants.SRC_VALUES_MAP);
            throw new ContextVariableNotFoundException(Constants.SRC_VALUES_MAP);
        }
        this.oidKey = new OidKey(oid);
        doTag();
    }

    /**
     * This method must be implemented by AbstractO1TransformerTag's
     * subclasses.
     *
     * @throws MissingAttributeException if a required attribute is missing.
     * @throws JellyTagException is an exception generated by
     * AbstractSetModelPropertyTag implementation.
     */
    public abstract void doTag() throws MissingAttributeException, JellyTagException;

    /**
     * Returns the OID associated with this tag.
     *
     * @return the OID associated with this tag.
     */
    public String getOid() {
        return oid;
    }

    /**
     * Sets the OID associated with this tag.
     *
     * @param oid the OID associated with this tag.
     */
    public void setOid(final String oid) {
        this.oid = oid;
    }

    /**
     * Returns the name of model's property associated with this tag.
     *
     * @return the name of model's property associated with this tag.
     */
    public String getMappedBy() {
        return mappedBy;
    }

    /**
     * Sets the name of model's property associated with this tag.
     *
     * @param mappedBy the name of model's property associated with this tag.
     */
    public void setMappedBy(final String mappedBy) {
        this.mappedBy = mappedBy;
    }

    /**
     * Returns the alarm object that the tag is processing.
     *
     * @return the alarm object
     */
    protected Object getAlarmObject() {
        return alarmObject;
    }

    /**
     * Returns the model object that the tag is processing.
     *
     * @return the model object
     */
    protected EventNotification getEventNotification() {
        return eventNotification;
    }

    /**
     * Returns a map of alarm data in the form OID/VALUE.
     *
     * @return a map of alarm data in the form OID/VALUE.
     */
    protected Map<OidKey, Object> getAlarmData() {
        return alarmData;
    }

    /**
     * Returns the value for this tag.
     *  
     * @return the alarm value or the value in the parent tag.
     */
    protected Object getValue() { 
        if (parent instanceof ValueHolder) {
            return ((ValueHolder) parent).getValue();
        } else {
            return getAlarmValue(oidKey);
        }
    }

    /**
     * Returns the value associated with this OID, if present in the alarm data,
     * null otherwise.
     *
     * @param oid the OID value as string.
     * @return the alarm value.
     */
    protected Object getAlarmValue(final String oid) {
        return getAlarmValue(new OidKey(oid));
    }

    /**
     * Returns the value associated with this OID, if present in the alarm data,
     * null otherwise.
     *
     * @param oid the OID as OidKey.
     * @return the alarm value.
     */
    protected Object getAlarmValue(final OidKey oid) {
        return alarmData.get(oid);
    }

    /**
     * Returns the OidKey associated with this tag.
     *
     * @return the OidKey associated with this tag.
     */
    protected OidKey getOidKey() {
        return oidKey;
    }

    /**
     * Assigns to model property the given value. The model's property is
     * identified by the 'mappedBy' attribute. The method converts, if
     * necessary, the value according to the type of model's property .
     *
     * @param value the value to set on model object.
     * @throws JellyTagException if an exception occur during setting.
     */
    protected void setModelProperty(Object value) throws JellyTagException {
        try {
            Class<?> propertyType = PropertyUtils.getPropertyType(eventNotification, mappedBy);
            Object converted = TransformerUtils.convert(value, propertyType);
            BeanUtils.setProperty(eventNotification, mappedBy, converted);
        } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            logger.error("Error setting property: " + mappedBy
                    + ". Raw value is " + value + " ( " + TransformerUtils.getClassName(value)
                    + " ), eventNotification is: " + eventNotification, ex);
            throw new JellyTagException("Error setting property: " + mappedBy
                    + ". Raw value is " + value + " ( " + TransformerUtils.getClassName(value)
                    + " ), eventNotification is: " + eventNotification, ex);
        }
    }

}
