/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2023
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/

package com.example.ves.tests;

import static io.restassured.RestAssured.given;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;

import org.junit.Test;

import com.example.ves.util.VesBodyGenerator;

import io.restassured.http.ContentType;

/**
 * Contains integration tests for the VES Listener.
 */
public class VesListenerIT extends BaseITClass {

    private static String VES_SIMULATOR_URI = "http://localhost:5000/simulator/event";
    private static int TIME_TO_WAIT_MILLISECS = 1000;

    @Test
    public void GIVEN_singleVesEvent_WHEN_postRequestIsSent_THEN_singleJmsMessageProduced() throws JMSException {

        // GIVEN - a single VES event is generated by the simulator
        given().contentType(ContentType.JSON)
                .body(VesBodyGenerator.getEvent())
                .when().post(VES_SIMULATOR_URI)
                .then().assertThat().statusCode(202);

        // THEN - the listener receives the event and generates a JMS message for it
        final Message jmsMessage = consumer.receive(TIME_TO_WAIT_MILLISECS);
        assertNotNull("No message received", jmsMessage);
        assertTrue("Received message is not a TextMessage", jmsMessage instanceof TextMessage);
    }
}
