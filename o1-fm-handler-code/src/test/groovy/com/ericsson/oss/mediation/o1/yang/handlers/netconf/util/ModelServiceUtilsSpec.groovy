package com.ericsson.oss.mediation.o1.yang.handlers.netconf.util

import com.ericsson.cds.cdi.support.rule.ObjectUnderTest
import com.ericsson.cds.cdi.support.spock.CdiSpecification
import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.primarytype.PrimaryTypeSpecification
import com.ericsson.oss.itpf.modeling.common.info.ModelInfo
import com.ericsson.oss.mediation.o1.yang.handlers.netconf.stub.PrimaryTypeAttributeSpecificationTestOk
import com.ericsson.oss.mediation.o1.yang.handlers.netconf.util.ModelServiceUtils

class ModelServiceUtilsSpec extends CdiSpecification {

    @ObjectUnderTest
    ModelServiceUtils objUnderTest;

    def setup() {

        objUnderTest.targetModelVersions = [
                'neType1': [
                        'oss1': [
                                'ns1': 'v1',
                                'ns2': 'v2'
                        ],
                        'oss2': [
                                'ns3': 'v3'
                        ]
                ],
                'neType2': [
                        'oss3': [
                                'ns4': 'v4'
                        ]
                ]
        ]
    }

    def "getModelVersion should return correct model version"() {
        expect:
        objUnderTest.getModelVersion(neType, ossIdentity, nameSpace) == expectedVersion

        where:
        neType    | ossIdentity | nameSpace || expectedVersion
        'neType1' | 'oss1'      | 'ns1'     || 'v1'
        'neType1' | 'oss1'      | 'ns2'     || 'v2'
        'neType1' | 'oss2'      | 'ns3'     || 'v3'
        'neType2' | 'oss3'      | 'ns4'     || 'v4'
    }

    def "getModelVersion should return null for missing data"() {
        expect:
        objUnderTest.getModelVersion(neType, ossIdentity, nameSpace) == null

        where:
        neType    | ossIdentity | nameSpace || _
        'neType3' | 'oss4'      | 'ns5'     || _
        'neType1' | 'oss4'      | 'ns1'     || _
        'neType1' | 'oss1'      | 'ns5'     || _
    }


    def "equalsNullOrEmpty should return true for null or empty strings"() {
        expect:
        ModelServiceUtils.equalsNullOrEmpty(input) == expected

        where:
        input || expected
        null  || true
        ""    || true
        " "   || false
        "abc" || false
    }

    def "test isOriginalYangNameMatch with YANG_ORIGINAL_NAME in metaData"() {
        given:
        def primaryTypeSpecification = Mock(PrimaryTypeSpecification)
        def metaData = ["YANG_ORIGINAL_NAME": "testType"]
        primaryTypeSpecification.getMetaInformation() >> metaData

        when:
        def result = objUnderTest.isOriginalYangNameMatch(primaryTypeSpecification, "testType")

        then:
        result
    }

    def "test isOriginalYangNameMatch without YANG_ORIGINAL_NAME in metaData"() {
        given:
        def primaryTypeSpecification = Mock(PrimaryTypeSpecification)
        def metaData = [:]
        def modelInfo = Mock(ModelInfo)
        modelInfo.getName() >> "testType"
        primaryTypeSpecification.getMetaInformation() >> metaData
        primaryTypeSpecification.getModelInfo() >> modelInfo

        when:
        def result = objUnderTest.isOriginalYangNameMatch(primaryTypeSpecification, "testType")

        then:
        result
    }

    def "test isOriginalYangNameMatch with no match"() {
        given:
        def primaryTypeSpecification = Mock(PrimaryTypeSpecification)
        def metaData = ["YANG_ORIGINAL_NAME": "differentType"]
        def modelInfo = Mock(ModelInfo)
        modelInfo.getName() >> "anotherType"
        primaryTypeSpecification.getMetaInformation() >> metaData
        primaryTypeSpecification.getModelInfo() >> modelInfo

        when:
        def result = objUnderTest.isOriginalYangNameMatch(primaryTypeSpecification, "testType")

        then:
        !result
    }

    def "test getModelKeys with non-auto generated keys"() {
        given:
        def primaryTypeSpec = Mock(PrimaryTypeSpecification)
        primaryTypeSpec.getKeyAttributeNames() >> ['key1', 'key2', 'key3']
        primaryTypeSpec.getAttributeSpecification('key1') >> null
        primaryTypeSpec.getAttributeSpecification('key2') >> new PrimaryTypeAttributeSpecificationTestOk(metaInformation: [:])
        primaryTypeSpec.getAttributeSpecification('key3') >> new PrimaryTypeAttributeSpecificationTestOk(metaInformation: [YANG_ARTIFIAL_KEY: true])

        when:
        def result = ModelServiceUtils.getModelKeys(primaryTypeSpec)

        then:
        result.getAt(0) == 'key1'
        result.getAt(1) == 'key2'
    }

    def "test isAutoGeneratedKey with auto generated key"() {
        given:
        def primaryTypeSpec = Mock(PrimaryTypeSpecification)
        def ptas = new PrimaryTypeAttributeSpecificationTestOk(metaInformation: [YANG_ARTIFIAL_KEY: true])
        primaryTypeSpec.getAttributeSpecification('key1') >> ptas

        when:
        def result = ModelServiceUtils.isAutoGeneratedKey(primaryTypeSpec, 'key1')

        then:
        result
    }

    def "test isAutoGeneratedKey with non-auto generated key"() {
        given:
        def primaryTypeSpec = Mock(PrimaryTypeSpecification)
        def ptas = new PrimaryTypeAttributeSpecificationTestOk(metaInformation: [:])
        primaryTypeSpec.getAttributeSpecification('key1') >> ptas

        when:
        def result = ModelServiceUtils.isAutoGeneratedKey(primaryTypeSpec, 'key1')

        then:
        !result
    }

    def "test getPrimaryTypeSpecification with null or empty #field"() {
        when:
        objUnderTest.getPrimaryTypeSpecification(namespace, version, managedObjectType, targetType, targetName, targetIdentity)

        then:
        thrown(IllegalArgumentException)

        where:
        field               | namespace   | version | managedObjectType | targetType   | targetName   | targetIdentity
        'namespace'         | null        | '1.0'   | 'Type'            | 'TargetType' | 'TargetName' | 'TargetIdentity'
        'version'           | 'Namespace' | null    | 'Type'            | 'TargetType' | 'TargetName' | 'TargetIdentity'
        'managedObjectType' | 'Namespace' | '1.0'   | null              | 'TargetType' | 'TargetName' | 'TargetIdentity'
    }

}